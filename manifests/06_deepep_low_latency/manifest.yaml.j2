---
apiVersion: v1
kind: Service
metadata:
  name: deepep-lowlatency-master-{{ test_id }}
  labels:
    app: deepep-lowlatency-test
    test-id: "{{ test_id }}"
spec:
  clusterIP: None
  selector:
    app: deepep-lowlatency-test
    role: master
    test-id: "{{ test_id }}"
  ports:
  - port: 29500
    name: dist
---
apiVersion: batch/v1
kind: Job
metadata:
  name: deepep-lowlatency-master-{{ test_id }}
  labels:
    app: deepep-lowlatency-test
    role: master
    test-id: "{{ test_id }}"
spec:
  template:
    metadata:
      labels:
        app: deepep-lowlatency-test
        role: master
        test-id: "{{ test_id }}"
      {% if sriov_network %}
      annotations:
        k8s.v1.cni.cncf.io/networks: "{{ sriov_network }}"
      {% endif %}
    spec:
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/hostname: "{{ server_node.name }}"
      containers:
      - name: deepep-lowlatency-master
        image: {{ image }}
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "Starting DeepEP low latency test (MASTER) on node {{ server_node.name }}"

          echo "GPU information:"
          nvidia-smi -L

          GPU_COUNT=$(nvidia-smi -L | wc -l)
          echo "Detected $GPU_COUNT GPUs"

          echo "Cloning DeepEP repository..."
          cd /tmp
          git clone https://github.com/deepseek-ai/DeepEP || echo "Repository already exists"
          cd DeepEP

          TOTAL_GPUS=$((GPU_COUNT * 2))
          echo "Running DeepEP low latency test with $TOTAL_GPUS total GPUs (rank 0-$((GPU_COUNT-1)))"

          export MASTER_ADDR=deepep-lowlatency-master-{{ test_id }}
          export MASTER_PORT=29500
          export WORLD_SIZE=$TOTAL_GPUS
          export RANK=0
          export PYTHONUNBUFFERED=1

          echo "Starting Python test script..."
          echo "Command: python tests/test_low_latency.py --num-processes $GPU_COUNT --num-tokens 128 --hidden 1024 --num-topk 4 --num-experts 32"

          python -u tests/test_low_latency.py --num-processes $GPU_COUNT --num-tokens 128 --hidden 1024 --num-topk 4 --num-experts 32 2>&1 | tee /tmp/test_output.log

          TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Python test exited with code: $TEST_EXIT_CODE"

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "DeepEP low latency test completed successfully"
          else
            echo "DeepEP low latency test FAILED with exit code $TEST_EXIT_CODE"
            echo "Last 50 lines of output:"
            tail -50 /tmp/test_output.log
            exit $TEST_EXIT_CODE
          fi
        resources:
          requests:
            {{ rdma_resource_type }}: "1"
            nvidia.com/gpu: "{{ gpu_count }}"
            memory: 8Gi
            cpu: "4"
          limits:
            {{ rdma_resource_type }}: "1"
            nvidia.com/gpu: "{{ gpu_count }}"
            memory: 16Gi
            cpu: "8"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
---
apiVersion: batch/v1
kind: Job
metadata:
  name: deepep-lowlatency-worker-{{ test_id }}
  labels:
    app: deepep-lowlatency-test
    role: worker
    test-id: "{{ test_id }}"
spec:
  template:
    metadata:
      labels:
        app: deepep-lowlatency-test
        role: worker
        test-id: "{{ test_id }}"
      {% if sriov_network %}
      annotations:
        k8s.v1.cni.cncf.io/networks: "{{ sriov_network }}"
      {% endif %}
    spec:
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/hostname: "{{ client_node.name }}"
      containers:
      - name: deepep-lowlatency-worker
        image: {{ image }}
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -e
          echo "Starting DeepEP low latency test (WORKER) on node {{ client_node.name }}"

          echo "GPU information:"
          nvidia-smi -L

          GPU_COUNT=$(nvidia-smi -L | wc -l)
          echo "Detected $GPU_COUNT GPUs"

          echo "Cloning DeepEP repository..."
          cd /tmp
          git clone https://github.com/deepseek-ai/DeepEP || echo "Repository already exists"
          cd DeepEP

          echo "Waiting for master to be ready..."
          until getent hosts deepep-lowlatency-master-{{ test_id }}; do
            echo "Waiting for master service..."
            sleep 2
          done
          sleep 5

          TOTAL_GPUS=$((GPU_COUNT * 2))
          echo "Running DeepEP low latency test with $TOTAL_GPUS total GPUs (rank $GPU_COUNT-$((TOTAL_GPUS-1)))"

          export MASTER_ADDR=deepep-lowlatency-master-{{ test_id }}
          export MASTER_PORT=29500
          export WORLD_SIZE=$TOTAL_GPUS
          export RANK=$GPU_COUNT
          export PYTHONUNBUFFERED=1

          echo "Starting Python test script..."
          echo "Command: python tests/test_low_latency.py --num-processes $GPU_COUNT --num-tokens 128 --hidden 1024 --num-topk 4 --num-experts 32"

          python -u tests/test_low_latency.py --num-processes $GPU_COUNT --num-tokens 128 --hidden 1024 --num-topk 4 --num-experts 32 2>&1 | tee /tmp/test_output.log

          TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "Python test exited with code: $TEST_EXIT_CODE"

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "DeepEP low latency test completed successfully"
          else
            echo "DeepEP low latency test FAILED with exit code $TEST_EXIT_CODE"
            echo "Last 50 lines of output:"
            tail -50 /tmp/test_output.log
            exit $TEST_EXIT_CODE
          fi
        resources:
          requests:
            {{ rdma_resource_type }}: "1"
            nvidia.com/gpu: "{{ gpu_count }}"
            memory: 8Gi
            cpu: "4"
          limits:
            {{ rdma_resource_type }}: "1"
            nvidia.com/gpu: "{{ gpu_count }}"
            memory: 16Gi
            cpu: "8"
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
